name: Production Deploy Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov black flake8 mypy
      
      - name: Lint
        run: |
          black --check .
          flake8 . --max-line-length=120
          mypy . --ignore-missing-imports
      
      - name: Test
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t myroofgenius-backend:${{ github.sha }} .
      
      - name: Run container tests
        run: |
          docker run --rm myroofgenius-backend:${{ github.sha }} python -m pytest

  deploy-preview:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Render Preview
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"branch": "'${{ github.head_ref }}'"}' \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
      
      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Preview deployed! Check the Render dashboard for URL.'
            })

  deploy-production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Render Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Run smoke tests
        run: |
          # Test health endpoint
          curl -f https://myroofgenius-backend.onrender.com/healthz || exit 1
          
          # Test readiness
          curl -f https://myroofgenius-backend.onrender.com/readyz || exit 1
          
          # Test metrics
          curl -f https://myroofgenius-backend.onrender.com/metrics || exit 1
      
      - name: Run production tests
        run: |
          pip install pytest-playwright
          playwright install chromium
          pytest tests/production_tests.py
      
      - name: Rollback on failure
        if: failure()
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          # Get previous deployment
          PREV_DEPLOY=$(curl -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys?limit=2" | \
            jq -r '.deploys[1].id')
          
          # Rollback
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"deployId": "'$PREV_DEPLOY'"}' \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/rollback"
      
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Deployment
            - Backend: https://myroofgenius-backend.onrender.com
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: false

  post-deploy-validation:
    needs: deploy-production
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate production health
        run: |
          # Check all endpoints
          endpoints=(
            "/healthz"
            "/readyz"
            "/metrics"
            "/api/status"
            "/api/services"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint..."
            curl -f "https://myroofgenius-backend.onrender.com$endpoint" || exit 1
          done
      
      - name: Check error rates
        run: |
          # Get metrics and check error rate
          METRICS=$(curl -s https://myroofgenius-backend.onrender.com/metrics)
          ERROR_RATE=$(echo $METRICS | grep -oP 'error_rate\s+\K[0-9.]+' || echo "0")
          
          if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
            echo "Error rate too high: $ERROR_RATE"
            exit 1
          fi
      
      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '‚úÖ Production deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()
      
      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Production deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()