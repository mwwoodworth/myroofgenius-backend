version: '3.9'

services:
  # PostgreSQL Database (Syncs with Production)
  postgres:
    image: postgres:15-alpine
    container_name: brainops-postgres
    environment:
      POSTGRES_DB: brainops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Brain0ps2O2S
    ports:
      - "5432:5432"
    volumes:
      - brainops-postgres-data:/var/lib/postgresql/data
      - ./.devops/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brainops-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: brainops-redis
    ports:
      - "6379:6379"
    volumes:
      - brainops-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brainops-network

  # FastAPI Backend (Live Development)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: brainops-backend-dev
    environment:
      DATABASE_URL: postgresql://postgres:Brain0ps2O2S@postgres:5432/brainops
      REDIS_URL: redis://redis:6379
      ENV: development
      SYNC_WITH_PROD: "true"
      PROD_DATABASE_URL: postgresql://postgres.yomagoqdmxszqtdwuhab:Brain0ps2O2S@aws-0-us-east-2.pooler.supabase.com:6543/postgres?sslmode=require
      NOTION_TOKEN: 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
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./.devops/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - brainops-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Production Sync Service
  prod-sync:
    build:
      context: .
      dockerfile: Dockerfile.sync
    container_name: brainops-prod-sync
    environment:
      LOCAL_DB: postgresql://postgres:Brain0ps2O2S@postgres:5432/brainops
      PROD_DB: postgresql://postgres.yomagoqdmxszqtdwuhab:Brain0ps2O2S@aws-0-us-east-2.pooler.supabase.com:6543/postgres?sslmode=require
      SYNC_INTERVAL: 300
      NOTION_TOKEN: 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
    volumes:
      - ./.devops/sync:/app/sync
      - ./.devops/logs/sync:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - brainops-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: brainops-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: BrainOps2025
      GF_INSTALL_PLUGINS: redis-datasource,alexanderzobnin-zabbix-datasource,grafana-postgresql-datasource
    ports:
      - "3001:3000"
    volumes:
      - brainops-grafana-data:/var/lib/grafana
      - ./.devops/grafana/provisioning:/etc/grafana/provisioning
      - ./.devops/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - brainops-network

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: brainops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./.devops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - brainops-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - brainops-network

  # Portainer CE for Docker Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: brainops-portainer
    ports:
      - "9002:9000"
      - "9003:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - brainops-portainer-data:/data
    restart: unless-stopped
    networks:
      - brainops-network

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: brainops-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@brainops.com
      PGADMIN_DEFAULT_PASSWORD: BrainOps2025
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - brainops-pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - brainops-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: brainops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.devops/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./.devops/nginx/ssl:/etc/nginx/ssl
      - ./.devops/nginx/html:/usr/share/nginx/html
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - brainops-network

  # AI Agent Orchestrator
  ai-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.ai
    container_name: brainops-ai-orchestrator
    environment:
      DATABASE_URL: postgresql://postgres:Brain0ps2O2S@postgres:5432/brainops
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      NOTION_TOKEN: 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
    ports:
      - "8001:8001"
    volumes:
      - ./ai_agents:/app
      - ./.devops/logs/ai:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - brainops-network

  # Notion Sync Worker
  notion-sync:
    build:
      context: .
      dockerfile: Dockerfile.notion
    container_name: brainops-notion-sync
    environment:
      DATABASE_URL: postgresql://postgres:Brain0ps2O2S@postgres:5432/brainops
      NOTION_TOKEN: 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
      SYNC_INTERVAL: 300
    volumes:
      - ./notion_sync:/app
      - ./.devops/logs/notion:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - brainops-network

networks:
  brainops-network:
    driver: bridge
    name: brainops-network

volumes:
  brainops-postgres-data:
  brainops-redis-data:
  brainops-grafana-data:
  brainops-prometheus-data:
  brainops-portainer-data:
  brainops-pgadmin-data: